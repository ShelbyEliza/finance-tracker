  const editDocument = async (docName, data) => {
    dispatch({ type: "IS_PENDING" });
    console.log(docName, data);

    try {
      // const lastEditedAt = timestamp.fromDate(new Date());
      const editedDocument = await ref
        .doc(docName)
        .update({ transactions: data }, { merge: true });

      // if (type === "income") {
      //   console.log("Income to add.");
      //   editedDocument = await ref.doc(docName).update({
      //     plus: firebase.firestore.FieldValue.arrayUnion(data),
      //   });
      // }
      // if (type === "expense") {
      //   console.log("Expense to add.");
      //   editedDocument = await ref.doc(docName).update({
      //     minus: firebase.firestore.FieldValue.arrayUnion(data),
      //   });
      // }
      // else {
      //   dispatchIfNotCancelled({
      //     type: "ERROR",
      //     payload: "No type selected. Couldn't add transaction to budget.",
      //   });
      // }
      // .update({ ...data, lastEditedAt });

      dispatchIfNotCancelled({
        type: "EDITED_DOCUMENT",
        payload: editedDocument,
      });
    } catch (err) {
      dispatchIfNotCancelled({ type: "ERROR", payload: err.message });
    }
  };

  \\\\\\\\\\\\\\\\\\\\\\\\\

    return (
    <div>
      {budgets && (
        <ul className="transactions">
          {budgets.map((budget) => (
            <li key={budget.id} className={budget.month}>
              <p>{budget.month}</p>
              {/* <p className="name">{budget.month}</p>
              {budget.type === "expense" && (
                <p className="amount">- ${budget.amount}</p>
              )}
              {budget.type === "income" && (
                <p className="amount">+ ${budget.amount}</p>
              )}
              <p>{budget.month}</p>
              <button onClick={() => deleteDocument(budget.id)}>x</button> */}
            </li>
          ))}
        </ul>
      )}
    </div>
  );