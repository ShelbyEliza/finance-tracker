  const editDocument = async (docName, data) => {
    dispatch({ type: "IS_PENDING" });
    console.log(docName, data);

    try {
      // const lastEditedAt = timestamp.fromDate(new Date());
      const editedDocument = await ref
        .doc(docName)
        .update({ transactions: data }, { merge: true });

      // if (type === "income") {
      //   console.log("Income to add.");
      //   editedDocument = await ref.doc(docName).update({
      //     plus: firebase.firestore.FieldValue.arrayUnion(data),
      //   });
      // }
      // if (type === "expense") {
      //   console.log("Expense to add.");
      //   editedDocument = await ref.doc(docName).update({
      //     minus: firebase.firestore.FieldValue.arrayUnion(data),
      //   });
      // }
      // else {
      //   dispatchIfNotCancelled({
      //     type: "ERROR",
      //     payload: "No type selected. Couldn't add transaction to budget.",
      //   });
      // }
      // .update({ ...data, lastEditedAt });

      dispatchIfNotCancelled({
        type: "EDITED_DOCUMENT",
        payload: editedDocument,
      });
    } catch (err) {
      dispatchIfNotCancelled({ type: "ERROR", payload: err.message });
    }
  };

  \\\\\\\\\\\\\\\\\\\\\\\\\

    return (
    <div>
      {budgets && (
        <ul className="transactions">
          {budgets.map((budget) => (
            <li key={budget.id} className={budget.month}>
              <p>{budget.month}</p>
              {/* <p className="name">{budget.month}</p>
              {budget.type === "expense" && (
                <p className="amount">- ${budget.amount}</p>
              )}
              {budget.type === "income" && (
                <p className="amount">+ ${budget.amount}</p>
              )}
              <p>{budget.month}</p>
              <button onClick={() => deleteDocument(budget.id)}>x</button> */}
            </li>
          ))}
        </ul>
      )}
    </div>
  );

  ------------------

  // rules_version = '2';
// service cloud.firestore {
//   match /databases/{database}/documents {
//     match /transactions/{document=**} {
//       allow create: if request.auth != null;
//       allow read, delete, update: if request.auth.uid == resource.data.uid;
//     }

//     match /budget_2022_test/{document=**} {
//       allow create: if request.auth != null;
//       allow read, delete, update: if request.auth.uid == resource.data.uid;
//     }

//     match /2022_budgets/{document=**} {
//       allow create: if request.auth != null;
//       allow read, delete, update: if request.auth.uid == resource.data.uid;
//     }

//     // match /users/{userID=**} {
//     //   allow create: if request.auth != null;
//     //   allow read, delete, update: if request.auth.uid == resource.data.uid;
//     //   // match /months/{allDocument=**} {
//     //   //   allow create: if request.auth != null;
//     //   //   allow read, delete, update: if request.auth.uid == resource.data.uid;
//     //   // }
//     // }
//   }
// }

[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId}/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
  }
}

=================

  // const monthList = [
  //   { month: "January", data: [] },
  //   { month: "February", data: [] },
  //   { month: "March", data: [] },
  //   { month: "April", data: [] },
  //   { month: "May", data: [] },
  //   { month: "June", data: [] },
  //   { month: "July", data: [] },
  //   { month: "August", data: [] },
  //   { month: "September", data: [] },
  //   { month: "October", data: [] },
  //   { month: "November", data: [] },
  //   { month: "December", data: [] },
  // ];

  const monthList = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
  ];

  // An individual player. Holds properties and behavior for one player
  class Month {
    data = [];
    constructor(name, data) {
      this.name = name;
      this.data = data;
    }
    checkExistence() {
      console.log(this.name, "exists");
    }
  }

  // Class that holds a collection of players and properties and functions for the group
  class Months {
    constructor() {
      this.months = [];
    }
    // create a new player and save it in the collection
    newMonth(name) {
      let m = new Month(name);
      this.months.push(m);
      return m;
    }
    get allMonths() {
      return this.months;
    }
    // this could include summary stats like average score, etc. For simplicy, just the count for now
    get numberOfMonths() {
      return this.months.length;
    }
  }

  let year = new Months();
  // league.newMonth("January");
  // league.newMonth("February");
  monthList.forEach((month) => year.newMonth(month));

  // list all the players
  // console.log(league.numberOfMonths + " Months");
  // console.log(year.allMonths);

  // make them do something
  // league.allMonths.forEach((month) => month.checkExistence());

  // class Month {
  //   month;
  //   data = [];
  //   year = 2023;
  //   constructor(month, data, year) {
  //     this.month = month;
  //     this.data = data;
  //     this.year = year;
  //   }
  // }
  // monthList.forEach((month) => new Month(month));

  // console.log(Month);
  // let january = []
  // let sortedByMonth;

  if (documents) {
    documents.forEach((doc) => {
      year.allMonths.forEach((m) => {
        if (doc.month === m) {
          console.log(doc);
          // year.month.data.push(doc);
        }
      });
    });
    console.log(year.allMonths);
    // console.log(documents);
    // sortedByMonth = monthList.map((month) => {
    //   let monthData = { month: month, data: [] };
    //   documents.forEach((doc) => {
    //     if (month.month === doc.month) {
    //       monthData.data.push(doc);
    //     }
    //   });
    //   return monthData;
    // });
    // console.log(sortedByMonth);
  }



  import { useCollection } from "../../hooks/useCollection";
import "./Home.css";

export default function TransactionList({ user }) {
  const { documents, error } = useCollection("transactions", [
    "uid",
    "==",
    user.uid,
  ]);
  // const monthList = [
  //   { month: "January", data: [] },
  //   { month: "February", data: [] },
  //   { month: "March", data: [] },
  //   { month: "April", data: [] },
  //   { month: "May", data: [] },
  //   { month: "June", data: [] },
  //   { month: "July", data: [] },
  //   { month: "August", data: [] },
  //   { month: "September", data: [] },
  //   { month: "October", data: [] },
  //   { month: "November", data: [] },
  //   { month: "December", data: [] },
  // ];

  const monthList = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
  ];

  let sortedByMonth = monthList.map((month) => { 
    return month
    // let monthData;
    // documents.forEach((doc) => {
    //   if (doc.month === month) {
    //     monthData = {month: month, data:[...data, doc]}
    //       }
    //   })
    //   return monthData
  )}
  
  console.log(sortedByMonth)

  // let sortedByMonth;

  // if (documents) {
  // console.log(documents);
  // sortedByMonth = monthList.map((month) => {
  //   let monthData = { month: month, data: [] };
  //   documents.forEach((doc) => {
  //     if (month.month === doc.month) {
  //       monthData.data.push(doc);
  //     }
  //   });
  //   return monthData;
  // });
  // console.log(sortedByMonth);
  //   <div className="transactions">
  //   {documents ? (
  // <div>
  //   {monthList.forEach((month) => {
  //     documents.forEach((doc) => {
  //       <div key={month}>
  //         <h1>{month}</h1>
  //         {doc.month === month && (
  //           <div className={doc.type}>
  //             <h2>{doc.name}</h2>
  //             <h3>{doc.amount}</h3>
  //           </div>
  //         )}
  //       </div>;
  //     });
  //   })}
  // </div>
  //   ) : (
  //     <p>No Docs</p>
  //   )}
  // </div>
  // }

  return (
    // <div className="transactions">
    //   {documents && (
    //     <div>Hello</div>
    //     {/* <div>
        
    //       {monthList.map((month) => (
    //         <div key={month}>
    //           {documents.map((doc) => (
    //             <>
    //               <h2>{month}</h2>
    //               {doc.month === month && (
    //                 <div className={doc.type}>
    //                   <h3>{doc.name}</h3>
    //                   <h3>{doc.amount}</h3>
    //                 </div>
    //               )}
    //             </>
    //           ))}
    //         </div>
    //       ))}
    //     </div> */}
    //   )}
    //   {!documents && <p>No Docs</p>}
    // </div>
  )
}
